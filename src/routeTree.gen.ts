/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AlgorithmsLayoutRouteImport } from './routes/algorithms/_layout'
import { Route as AlgorithmsLayoutSortingRouteImport } from './routes/algorithms/_layout/sorting'
import { Route as AlgorithmsLayoutSearchingRouteImport } from './routes/algorithms/_layout/searching'
import { Route as AlgorithmsLayoutPathfindingRouteImport } from './routes/algorithms/_layout/pathfinding'

const AlgorithmsRouteImport = createFileRoute('/algorithms')()

const AlgorithmsRoute = AlgorithmsRouteImport.update({
  id: '/algorithms',
  path: '/algorithms',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AlgorithmsLayoutRoute = AlgorithmsLayoutRouteImport.update({
  id: '/_layout',
  getParentRoute: () => AlgorithmsRoute,
} as any)
const AlgorithmsLayoutSortingRoute = AlgorithmsLayoutSortingRouteImport.update({
  id: '/sorting',
  path: '/sorting',
  getParentRoute: () => AlgorithmsLayoutRoute,
} as any)
const AlgorithmsLayoutSearchingRoute =
  AlgorithmsLayoutSearchingRouteImport.update({
    id: '/searching',
    path: '/searching',
    getParentRoute: () => AlgorithmsLayoutRoute,
  } as any)
const AlgorithmsLayoutPathfindingRoute =
  AlgorithmsLayoutPathfindingRouteImport.update({
    id: '/pathfinding',
    path: '/pathfinding',
    getParentRoute: () => AlgorithmsLayoutRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/algorithms': typeof AlgorithmsLayoutRouteWithChildren
  '/algorithms/pathfinding': typeof AlgorithmsLayoutPathfindingRoute
  '/algorithms/searching': typeof AlgorithmsLayoutSearchingRoute
  '/algorithms/sorting': typeof AlgorithmsLayoutSortingRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/algorithms': typeof AlgorithmsLayoutRouteWithChildren
  '/algorithms/pathfinding': typeof AlgorithmsLayoutPathfindingRoute
  '/algorithms/searching': typeof AlgorithmsLayoutSearchingRoute
  '/algorithms/sorting': typeof AlgorithmsLayoutSortingRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/algorithms': typeof AlgorithmsRouteWithChildren
  '/algorithms/_layout': typeof AlgorithmsLayoutRouteWithChildren
  '/algorithms/_layout/pathfinding': typeof AlgorithmsLayoutPathfindingRoute
  '/algorithms/_layout/searching': typeof AlgorithmsLayoutSearchingRoute
  '/algorithms/_layout/sorting': typeof AlgorithmsLayoutSortingRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/algorithms'
    | '/algorithms/pathfinding'
    | '/algorithms/searching'
    | '/algorithms/sorting'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/algorithms'
    | '/algorithms/pathfinding'
    | '/algorithms/searching'
    | '/algorithms/sorting'
  id:
    | '__root__'
    | '/'
    | '/algorithms'
    | '/algorithms/_layout'
    | '/algorithms/_layout/pathfinding'
    | '/algorithms/_layout/searching'
    | '/algorithms/_layout/sorting'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AlgorithmsRoute: typeof AlgorithmsRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/algorithms': {
      id: '/algorithms'
      path: '/algorithms'
      fullPath: '/algorithms'
      preLoaderRoute: typeof AlgorithmsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/algorithms/_layout': {
      id: '/algorithms/_layout'
      path: '/algorithms'
      fullPath: '/algorithms'
      preLoaderRoute: typeof AlgorithmsLayoutRouteImport
      parentRoute: typeof AlgorithmsRoute
    }
    '/algorithms/_layout/sorting': {
      id: '/algorithms/_layout/sorting'
      path: '/sorting'
      fullPath: '/algorithms/sorting'
      preLoaderRoute: typeof AlgorithmsLayoutSortingRouteImport
      parentRoute: typeof AlgorithmsLayoutRoute
    }
    '/algorithms/_layout/searching': {
      id: '/algorithms/_layout/searching'
      path: '/searching'
      fullPath: '/algorithms/searching'
      preLoaderRoute: typeof AlgorithmsLayoutSearchingRouteImport
      parentRoute: typeof AlgorithmsLayoutRoute
    }
    '/algorithms/_layout/pathfinding': {
      id: '/algorithms/_layout/pathfinding'
      path: '/pathfinding'
      fullPath: '/algorithms/pathfinding'
      preLoaderRoute: typeof AlgorithmsLayoutPathfindingRouteImport
      parentRoute: typeof AlgorithmsLayoutRoute
    }
  }
}

interface AlgorithmsLayoutRouteChildren {
  AlgorithmsLayoutPathfindingRoute: typeof AlgorithmsLayoutPathfindingRoute
  AlgorithmsLayoutSearchingRoute: typeof AlgorithmsLayoutSearchingRoute
  AlgorithmsLayoutSortingRoute: typeof AlgorithmsLayoutSortingRoute
}

const AlgorithmsLayoutRouteChildren: AlgorithmsLayoutRouteChildren = {
  AlgorithmsLayoutPathfindingRoute: AlgorithmsLayoutPathfindingRoute,
  AlgorithmsLayoutSearchingRoute: AlgorithmsLayoutSearchingRoute,
  AlgorithmsLayoutSortingRoute: AlgorithmsLayoutSortingRoute,
}

const AlgorithmsLayoutRouteWithChildren =
  AlgorithmsLayoutRoute._addFileChildren(AlgorithmsLayoutRouteChildren)

interface AlgorithmsRouteChildren {
  AlgorithmsLayoutRoute: typeof AlgorithmsLayoutRouteWithChildren
}

const AlgorithmsRouteChildren: AlgorithmsRouteChildren = {
  AlgorithmsLayoutRoute: AlgorithmsLayoutRouteWithChildren,
}

const AlgorithmsRouteWithChildren = AlgorithmsRoute._addFileChildren(
  AlgorithmsRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AlgorithmsRoute: AlgorithmsRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
